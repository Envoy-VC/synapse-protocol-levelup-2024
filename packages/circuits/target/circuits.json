{"noir_version":"0.33.0+325dac54efb6f99201de9fdeb0a507d45189607d","hash":17671939543065719814,"abi":{"parameters":[{"name":"answer","type":{"kind":"array","length":16,"type":{"kind":"field"}},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"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","debug_symbols":"zZ3daltHFEbfRde+mP03s7dfpZTiJE4xGDvETqGYvHvt1sKlEjb0aKN1F8XHwyfQWVr47G/maffl+tOP33+7uft6/7C7/OVpd3v/+erx5v7u+dXTbvz9Xw/fru5eXj08Xn1/3F3asIvd9d2X539Z/LzYfb25vd5dRv68OLw09fVSV327dB25NMbrlS8LvV3468VOCCGUEMIIIZwQIgghJiHEIoRIQog6Q4g1/gurgUghiBSKSLGVmu61T5H1v1M4IkUgUmwFZ4jsIaAHtoAAoiCIKIVQJ4RFKkMjER6pCJFUhEkqQiUV4ZK6CF/YmogUCJ00hE6aELTBFJECoZPmjQplCCQaAomG0ElD6KQhdNIROukInXSETjrj75IInfQgfGH7RKRA6KQjdNKLoA0xECkQOhnaqFCBQGIgkBgInQyETgZCJwOhk4HQyYnQyYnQyYnQyWmEL+zpiBQInZwInZyLoA0zESkQOrlGo0ItBBIXAokLoZPLESkQOrkYwz8InVwInVwInUyETiZi/icR8z+J0MlE6GQi5n9yIlIgdDKzUaESgcRCILEQOlkInSyETpYjUiB0shA6WQidLMQDm4KMkzPmyQdjoHwgRoBkMEbKhzNiRKPCyECQUQZjrHww5soHQixFGP1EQailCMItRRByKZsLNyeKgdBLEcQTHBHERJAIwjBFGIqpiKEgUcRUkChDMTdXdN6VKkb1RhjdG2GUb0QZiqkMxVSGYhpDMY2hmMZQTGMopjni+9sQM0JiDMU0hmIaYkxIDDEnJM5QzM2lnXelilHGEUYbRxh1HHGGYjpDMZ2hmM5QTGcoZjAUMxiPeIKxaVAgpobkLA2eIzEY+wYFYnBIAjE5JNE5OiSMdo4w6jnC6OcIo6Ajk6GYZ6noHInBUMzJUMzJUMzJUMzJeMSzGFNEi6GYi6GYizFFtLnVc6IYDMVcvXtTMuDIKOwIo7EjjMqOJEMxk6GYyVDMs9R2jsRgKGYyFDMZj3iSMUWUDMUshmIWY4qoGFNExVDMzU2fd6WK0eARRoVHGB0eKcgG6JAd0BlboA/GHuiDsQn6YOyCPhCKqQMxRaQDMUWkg7ET+mBshT4QU0QqiCkiFYRiqnTuX6mMFo8yWjzKaPGoME6JYByxo4wzdhRyyA7klB3KMTsMxVTEFJGepe5zJAZDMZWhmIqYIlJFDKqrMhTTOne0VEaLRxktHmW0ePQsLZ4jMRiKyTh1RxnH7ijj3B1lHLyjjJN31BFTROqIKSJ1hmKepe5zJAZiikgdMaiuzlBM7xxUV0aLRxktHg2GYgZDMRnH8CjjHB5lHMSjjJN4lHEUjzLO4tFATBHpREwR6WQo5mQo5kRMEenmus+JYjAUc3YOqiujxaOMFo9OhmIuhmIyDuZRxsk8yjiaRxln8yjjcB5djEc8izFFtBhTRIuhmMmYIkrGFFEiBtU1O7e71M0tHhkSr9fK+PfFr+tH8/qzef3VvH42r1+962/utny0vjSvr83rW/P6zfdvNd+/1Xz/VvP9W833b/Xev7a5fiEWuV/fxd//mpO11xQpPYginCjKiWKcKH7KKGoH6wfnrU5OlMWJkpwo1ftZFA4XhcNF4XBROFyUZi4Kh4vC4aJwuCgcLkozF5XDReVwUTlcVA4XtZmLyuGicrioHC4qh4vazEXjcNE4XDQOF43DRWvmonG4aBwuGoeLxuGiNXPROVx0Dhedw0XncNGbuegcLjqHi87honO46M1cDA4Xg8PF4HAxOFyMZi4Gh4vB4WJwuBgcLkYzFyeHi5PDxcnh4uRwcTZzcXK4ODlcnBwuTg4XZzMXF4eLi8PFxeHi4nBxNXNxcbi4OFxcHC4uDhdXMxeTw8XkcDE5XEwOF7OZi8nhYnK4mBwuJoeL2czF4nCxOFwsDheLw8Vq5mJxuFgcLhaHi8XhYvVy0Tl9F+f0XZzTd3FO38WHN38WMVx0Tt/FOX0X5/RdvLnv4py+i3P6Ls7puzin7+LNfRfn9F2c03dxTt/FOX0Xb+67+Pa+y5pzv35+tDfLu291e9/ldFGUE8U4UfyUUUwO1g/OW52cKIsTJTlRqvezaBwuGoeLxuGicbhozVw0DheNw0XjcNE4XLRmLjqHi87honO46BwuejMXncNF53DROVx0Dhe9mYvB4WJwuBgcLgaHi9HMxeBwMThcDA4Xg8PFaObi5HBxcrg4OVycHC7OZi5ODhcnh4uTw8XJ4eJs5uLicHFxuLg4XFwcLq5mLi4OFxeHi4vDxcXh4mrmYnK4mBwuJoeLyeFiNnMxOVxMDheTw8XkcDGbuVgcLhaHi8XhYnG4WM1cLA4Xi8PF4nCxOFysXi7GwHAxBoaLMTBcjIHhYgxv/ixiuBgDw8UYGC7GwHAxRjMXhcNF4XBROFwUDhelmYvC4aJwuCgcLgqHi9LMRU7fJTh9l+D0XYLTd4nmvktw+i7B6bsEp+8SnL5LNPddgtN3CU7fJTh9l+D0XaK57xKb+y6qvu+8qs5xsP7cvP56W78O11/N+bM5f/Xm39wh+SD/5mLIR/m1Mf/ziz+uvt9cfbq9fnj+lZef/bj7/Hhzf/f68vHPb//85PnavwA=","file_map":{"57":{"source":"fn less_than_eq(x: Field, y: Field) -> bool {\n    x as u32 <= y as u32\n}\n\nfn is_zero(x: Field) -> bool {\n    x as u32 == 0\n}\n\nfn is_equal(x: Field, y: Field) -> bool {\n    x as u32 == y as u32\n}\n\npub fn sudoku(puzzle: [Field; 16], solution: [Field; 16]) {\n    // Check if all the numbers lie between 1 and 4\n    for row in 0..4 {\n        for col in 0..4 {\n            let lt_four = less_than_eq(solution[row * 4 + col], 4);\n            let gt_one = less_than_eq(1, solution[row * 4 + col]);\n\n            assert(lt_four == gt_one);\n        }\n    }\n\n    // Check if puzzle is the initial state of solution\n    // If puzzle[row][col] is not zero, make sure solution[row][col] is equal to puzzle[row][col]\n    // If puzzle[row][col] is zero, make sure solution [row][col] is different from puzzle[row][col]\n    for row in 0..4 {\n        for col in 0..4 {\n            let ie_board = is_equal(solution[row * 4 + col], puzzle[row * 4 + col]);\n            let iz_board = is_zero(puzzle[row * 4 + col]);\n\n            assert(ie_board != iz_board);\n        }\n    }\n\n    // Check if each row in solution has all the numbers from 1 to 4, both included\n    // For each element in solution, check that this element is not equal\n    // to previous elements in the same row\n    for row in 0..4 {\n        for col in 0..4 {\n            for c in 0..col {\n                assert(is_equal(solution[row * 4 + c], solution[row * 4 + col]) == false);\n            }\n        }\n    }\n\n    // Check if each column in solution has all the numbers from 1 to 4, both included\n    // For each element in solution, check that this element is not equal\n    // to previous elements in the same column\n    for row in 0..4 {\n        for col in 0..4 {\n            for r in 0..row {\n                assert(is_equal(solution[r * 4 + col], solution[row * 4 + col]) == false);\n            }\n        }\n    }\n\n    // for each row/ column check sum is 10\n    // for each subgrid check sum is 10\n\n    for row in 0..4 {\n        let mut rowSum = 0;\n        let mut colSum = 0;\n\n        rowSum += solution[4 * row] + solution[4 * row + 1] + solution[4 * row + 2] + solution[4 * row + 3];\n        colSum += solution[row] + solution[row + 4] + solution[row + 8] + solution[row + 12];\n\n        assert(rowSum == 10);\n        assert(colSum == 10);\n    }\n}\n","path":"/Users/envoy1084/Projects/Core/synapse-protocol-levelup-2024/packages/circuits/src/sudoku.nr"},"58":{"source":"use dep::std;\nmod sudoku;\n\n// Given a 4x4 sudoku board with array signal input \"question\" and \"solution\", check if the solution is correct.\n\nfn main(answer: [Field; 16]) {\n    let mut question:[Field; 16] = [1, 0, 0, 0, 0, 2, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1];\n    // check if question and answer match\n    sudoku::sudoku(question, answer)\n}\n","path":"/Users/envoy1084/Projects/Core/synapse-protocol-levelup-2024/packages/circuits/src/main.nr"}},"names":["main"]}